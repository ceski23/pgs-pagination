{"version":3,"sources":["styles/App.module.scss","styles/SearchSection.module.scss","styles/Song.module.scss","styles/SongsList.module.scss","images/pgslogo.png","components/SearchSection.js","components/Song.js","components/SongsList.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","app","header","logo","status","navigation","footer","search","title","searchBox","input","submit","text","song","info","author","cover","songCount","songs","__webpack_require__","p","SearchSection","_ref","filter","setFilter","reSearch","react_default","a","createElement","className","S","onSubmit","event","preventDefault","type","value","onChange","target","placeholder","Song","data","trackName","artistName","artworkUrl100","src","alt","SongsList","fullCount","Fragment","map","i","components_Song","key","App","_useState","useState","_useState2","Object","slicedToArray","offset","setOffset","_useState3","_useState4","_useAxios","useAxios","url","method","options","adapter","jsonp","params","term","entity","limit","response","loading","reFetch","results","components_SearchSection","length","components_SongsList","slice","onClick","n","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa0b4603.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2_zX8\",\"header\":\"App_header__3gd7p\",\"logo\":\"App_logo__2y-fZ\",\"status\":\"App_status__1abEx\",\"navigation\":\"App_navigation__38wcU\",\"footer\":\"App_footer__36HhQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"SearchSection_search__2SIL4\",\"title\":\"SearchSection_title__cE2zl\",\"searchBox\":\"SearchSection_searchBox__1Eba-\",\"input\":\"SearchSection_input__3-i84\",\"submit\":\"SearchSection_submit__1xW7Z\",\"text\":\"SearchSection_text__3mjWQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"song\":\"Song_song__13YL6\",\"info\":\"Song_info__1kvDr\",\"title\":\"Song_title__2OQSq\",\"author\":\"Song_author__3N7nl\",\"cover\":\"Song_cover__3weCE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"songCount\":\"SongsList_songCount__1rVvN\",\"songs\":\"SongsList_songs__399Li\"};","module.exports = __webpack_public_path__ + \"static/media/pgslogo.9e495a61.png\";","import React from 'react';\r\nimport S from '../styles/SearchSection.module.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst SearchSection = ({ filter, setFilter, reSearch }) => {\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    reSearch();\r\n  }\r\n\r\n  const onChange = (event) => {\r\n    setFilter(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <section className={S.search}>\r\n      <h2 className={S.title}>iTunes api example</h2>\r\n      <form className={S.searchBox} onSubmit={onSubmit}>\r\n        <input type='text' className={S.input} value={filter} onChange={onChange} placeholder='Search songs...' />\r\n        <input type='submit' className={S.submit} value='search' />\r\n      </form>\r\n      <p className={S.text}>Search by song title, author, song number, lyrics, catalog or copyright owner</p>\r\n    </section>\r\n  )\r\n}\r\n\r\nSearchSection.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  setFilter: PropTypes.func.isRequired,\r\n  reSearch: PropTypes.func.isRequired\r\n}\r\n\r\nexport default SearchSection;","import React from 'react';\r\nimport S from '../styles/Song.module.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Song = ({ data }) => {\r\n  const { trackName, artistName, artworkUrl100 } = data;\r\n  \r\n  return (\r\n    <div className={S.song}>\r\n      <img src={artworkUrl100} alt={trackName} className={S.cover} />\r\n      <div className={S.info}>\r\n        <h3 className={S.title}>{trackName}</h3>\r\n        <p className={S.author}>By {artistName}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nSong.propTypes = {\r\n  data: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Song;","import React from 'react';\r\nimport S from '../styles/SongsList.module.scss';\r\nimport Song from './Song';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SongsList = ({ songs, fullCount }) => {\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <p className={S.songCount}>Found {fullCount} songs</p>\r\n\r\n      <div className={S.songs}>\r\n        {songs.map((p, i) => <Song data={p} key={i} />)}\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nSongsList.propTypes = {\r\n  songs: PropTypes.array.isRequired,\r\n  fullCount: PropTypes.number.isRequired\r\n}\r\n\r\nexport default SongsList;","import React, { useState } from 'react';\nimport jsonp from 'axios-jsonp';\nimport useAxios from '@use-hooks/axios';\n\nimport S from '../styles/App.module.scss';\nimport logo from '../images/pgslogo.png';\nimport SearchSection from './SearchSection';\nimport SongsList from './SongsList';\n\nconst App = () => {\n  const [offset, setOffset] = useState(0);\n  const [filter, setFilter] = useState('');\n  const perPage = 9;\n\n  const {response, loading, reFetch} = useAxios({\n    url: 'https://itunes.apple.com/search',\n    method: 'GET',\n    options: {\n      adapter: jsonp,\n      params: {\n        term: filter,\n        entity: 'song',\n        limit: 200\n      }\n    }\n  });\n\n  const songs = response ? response.data.results : [];\n\n  const increaseOffset = () => {\n    const n = offset + perPage;\n    if (n < songs.length) setOffset(n);\n  }\n\n  const decreaseOffset = () => {\n    const n = offset - perPage;\n    if (n >= 0) setOffset(n);\n  }\n\n  return (\n    <div className={S.app}>\n      <div className={S.header}>\n        <img src={logo} alt='PGS Software logo' className={S.logo} />\n      </div>\n\n      <SearchSection setFilter={setFilter} filter={filter} reSearch={reFetch} />\n\n      {songs.length > 0 && !loading ? (\n        <React.Fragment>\n          <SongsList songs={songs.slice(offset, offset + perPage)} fullCount={songs.length} />\n\n          <div className={S.navigation}>\n            <button onClick={decreaseOffset}>&lt;&lt; prev</button>\n            <button onClick={increaseOffset}>next &gt;&gt;</button>\n          </div>\n        </React.Fragment>\n      ) : (\n        <div className={S.status}>\n          {loading ? <p>Loading data...</p> : response ? <p>Sorry, no matches found</p> : null}\n        </div>\n      )}\n\n      <div className={S.footer}>\n        <p>Powered by PGS</p>\n      </div>\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.querySelector('#root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}