{"version":3,"sources":["components/SearchSection.js","styles.js","components/Song.js","components/SongsList.js","components/App.js","serviceWorker.js","index.js","images/pgslogo.png"],"names":["SearchSection","_ref","filter","setFilter","reSearch","searchSection","css","_templateObject","sectionTitle","_templateObject2","searchForm","_templateObject3","sectionText","_templateObject4","Object","core_browser_esm","onSubmit","event","preventDefault","type","value","onChange","target","placeholder","breakpointUp","size","content","styles_templateObject","forTabletLandscapeUp","Song","data","trackName","artistName","artworkUrl100","songStyle","Song_templateObject","Song_templateObject2","Song_templateObject3","coverStyle","Song_templateObject4","infoStyle","_templateObject5","infoTitleStyle","_templateObject6","infoArtistStyle","_templateObject7","src","alt","SongsList","songs","fullCount","songCountStyle","SongsList_templateObject","songsStyle","SongsList_templateObject2","react_default","a","Fragment","map","p","i","components_Song","key","App","_useState","useState","_useState2","slicedToArray","offset","setOffset","_useState3","_useState4","_useAxios","useAxios","url","method","options","adapter","jsonp","params","term","entity","limit","response","loading","reFetch","results","appStyle","App_templateObject","headerStyle","App_templateObject2","App_templateObject3","logoStyle","App_templateObject4","navigationStyle","App_templateObject5","statusStyle","App_templateObject6","footerStyle","App_templateObject7","logo","components_SearchSection","length","components_SongsList","slice","onClick","n","Boolean","window","location","hostname","match","globalStyle","src_templateObject","ReactDOM","render","createElement","styles","components_App","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__"],"mappings":"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","file":"static/js/main.82758df3.chunk.js","sourcesContent":["/** @jsx jsx */\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { css, jsx } from '@emotion/core';\r\n\r\nconst SearchSection = ({ filter, setFilter, reSearch }) => {\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    reSearch();\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    setFilter(event.target.value);\r\n  };\r\n\r\n  const searchSection = css`\r\n    background: #353535;\r\n    color: #fff;\r\n    padding: 20px 0;\r\n    text-align: center;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 100%;\r\n  `;\r\n\r\n  const sectionTitle = css`\r\n    margin: 0;\r\n    width: 70%;\r\n  `;\r\n\r\n  const searchForm = css`\r\n    margin: 30px 0;\r\n    width: 70%;\r\n    display: flex;\r\n    justify-content: center;\r\n\r\n    input[type=text] {\r\n      background: #e8e8e8;\r\n      border-radius: 30px 0 0 30px;\r\n      border: none;\r\n      padding: 10px 20px;\r\n      font-size: 16px;\r\n      display: block;\r\n      flex: 1;\r\n      min-width: 0;\r\n      max-width: 200px;\r\n    }\r\n\r\n    input[type=submit] {\r\n      background: orange;\r\n      color: #fff;\r\n      border-radius: 0 30px 30px 0;\r\n      border: none;\r\n      padding: 10px 20px;\r\n      font-size: 16px;\r\n    }\r\n  `;\r\n\r\n  const sectionText = css`\r\n    margin: 0;\r\n    width: 70%;\r\n    font-size: 14px;\r\n  `;\r\n\r\n  return (\r\n    <section css={searchSection}>\r\n      <h2 css={sectionTitle}>iTunes api example</h2>\r\n      <form css={searchForm} onSubmit={onSubmit}>\r\n        <input type=\"text\" value={filter} onChange={onChange} placeholder=\"Search songs...\" />\r\n        <input type=\"submit\" value=\"search\" />\r\n      </form>\r\n      <p css={sectionText}>\r\n        Search by song title, author, song number, lyrics, catalog or copyright owner\r\n      </p>\r\n    </section>\r\n  );\r\n};\r\n\r\nSearchSection.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  setFilter: PropTypes.func.isRequired,\r\n  reSearch: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SearchSection;\r\n","/* eslint-disable import/prefer-default-export */\r\nimport { css } from '@emotion/core';\r\n\r\nconst breakpointUp = (size, content) => css`\r\n  @media (min-width: ${size}px) {\r\n    ${content}\r\n  }\r\n`;\r\n\r\nconst breakpointUpTo = (size, content) => css`\r\n  @media (max-width: ${size}px) {\r\n    ${content}\r\n  }\r\n`;\r\n\r\nexport const forPhoneOnly = content => breakpointUpTo(599, content);\r\nexport const forTabletPortraitUp = content => breakpointUp(600, content);\r\nexport const forTabletLandscapeUp = content => breakpointUp(800, content);\r\nexport const forDesktopUp = content => breakpointUp(1200, content);\r\nexport const forBigDesktopUp = content => breakpointUp(1800, content);\r\n","/** @jsx jsx */\r\n\r\nimport { css, jsx } from '@emotion/core';\r\nimport PropTypes from 'prop-types';\r\nimport { forTabletLandscapeUp, forDesktopUp } from '../styles';\r\n\r\nconst Song = ({ data }) => {\r\n  const { trackName, artistName, artworkUrl100 } = data;\r\n\r\n  const songTileMargin = '20px';\r\n\r\n  const songStyle = css`\r\n    display: flex;\r\n    flex-direction: row;\r\n    background: #efefef;\r\n    width: calc(100% - 2*${songTileMargin});\r\n    margin-bottom: 30px;\r\n    padding: 20px;\r\n    border: 2px solid transparent;\r\n    transition: .3s;\r\n    margin: ${songTileMargin};\r\n    height: 130px;\r\n    align-items: center;\r\n\r\n    ${forTabletLandscapeUp(css`\r\n      width: calc(50% - 2*${songTileMargin});\r\n    `)}\r\n\r\n    ${forDesktopUp(css`\r\n      width: calc(33% - 2*${songTileMargin});\r\n    `)}\r\n\r\n    &:hover {\r\n      border-color: orange;\r\n      box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.4);\r\n    }\r\n  `;\r\n\r\n  const coverStyle = css`\r\n    width: 90px;\r\n    height: 90px;\r\n    border: 2px solid black;\r\n    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.6);\r\n    margin-right: 20px;\r\n  `;\r\n\r\n  const infoStyle = css`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex: 1;\r\n    overflow: hidden;\r\n  `;\r\n\r\n  const infoTitleStyle = css`\r\n    margin: 0;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    width: 100%;\r\n    overflow: hidden;\r\n    text-align: center;\r\n    font-size: 16px;\r\n  `;\r\n\r\n  const infoArtistStyle = css`\r\n    margin: 5px 0 0;\r\n    padding-top: 5px;\r\n    border-top: 1px solid #c3c3c3;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    width: 100%;\r\n    overflow: hidden;\r\n    text-align: center;\r\n    font-size: 15px;\r\n  `;\r\n\r\n  return (\r\n    <div css={songStyle}>\r\n      <img src={artworkUrl100} alt={trackName} css={coverStyle} />\r\n      <div css={infoStyle}>\r\n        <h3 css={infoTitleStyle}>{trackName}</h3>\r\n        <p css={infoArtistStyle}>By {artistName}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSong.propTypes = {\r\n  data: PropTypes.shape({\r\n    trackName: PropTypes.string.isRequired,\r\n    artistName: PropTypes.string.isRequired,\r\n    artworkUrl100: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default Song;\r\n","/** @jsx jsx */\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { css, jsx } from '@emotion/core';\r\nimport Song from './Song';\r\n\r\nconst SongsList = ({ songs, fullCount }) => {\r\n  const songCountStyle = css`\r\n    text-align: center;\r\n  `;\r\n\r\n  const songsStyle = css`\r\n    margin: 0 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    justify-content: left;\r\n    max-width: 1000px;\r\n    width: 100%;\r\n    flex: 1;\r\n  `;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <p css={songCountStyle}>Found {fullCount} songs</p>\r\n\r\n      <div css={songsStyle}>\r\n        {songs.map((p, i) => <Song data={p} key={i} />)}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nSongsList.propTypes = {\r\n  songs: PropTypes.arrayOf(PropTypes.shape({\r\n    trackName: PropTypes.string.isRequired,\r\n    artistName: PropTypes.string.isRequired,\r\n    artworkUrl100: PropTypes.string.isRequired,\r\n  })).isRequired,\r\n  fullCount: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default SongsList;\r\n","/** @jsx jsx */\r\n\r\nimport React, { useState } from 'react';\r\nimport jsonp from 'axios-jsonp';\r\nimport useAxios from '@use-hooks/axios';\r\nimport { css, jsx } from '@emotion/core';\r\n\r\nimport logo from '../images/pgslogo.png';\r\nimport SearchSection from './SearchSection';\r\nimport SongsList from './SongsList';\r\nimport { forTabletLandscapeUp } from '../styles';\r\n\r\nconst App = () => {\r\n  const [offset, setOffset] = useState(0);\r\n  const [filter, setFilter] = useState('');\r\n  const perPage = 9;\r\n\r\n  const { response, loading, reFetch } = useAxios({\r\n    url: 'https://itunes.apple.com/search',\r\n    method: 'GET',\r\n    options: {\r\n      adapter: jsonp,\r\n      params: {\r\n        term: filter,\r\n        entity: 'song',\r\n        limit: 200,\r\n      },\r\n    },\r\n  });\r\n\r\n  const songs = response ? response.data.results : [];\r\n\r\n\r\n  const increaseOffset = () => {\r\n    const n = offset + perPage;\r\n    if (n < songs.length) setOffset(n);\r\n  };\r\n\r\n  const decreaseOffset = () => {\r\n    const n = offset - perPage;\r\n    if (n >= 0) setOffset(n);\r\n  };\r\n\r\n\r\n  const appStyle = css`\r\n    background: #fff;\r\n    position: relative;\r\n    min-height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n  `;\r\n\r\n  const headerStyle = css`\r\n    background: #fff;\r\n    height: 70px;\r\n    width: 100%;\r\n\r\n    ${forTabletLandscapeUp(css`\r\n      width: 50%;\r\n    `)}\r\n  `;\r\n\r\n  const logoStyle = css`\r\n    height: 100%;\r\n  `;\r\n\r\n  const navigationStyle = css`\r\n    display: flex;\r\n    justify-content: center;\r\n    margin: 30px 0;\r\n\r\n    button {\r\n      border-radius: 10px;\r\n      background: orange;\r\n      color: #fff;\r\n      border: 0;\r\n      padding: 5px 15px;\r\n      margin: 0 5px;\r\n    }\r\n  `;\r\n\r\n  const statusStyle = css`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex: 1;\r\n  `;\r\n\r\n  const footerStyle = css`\r\n    color: #fff;\r\n    background: #353535;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 60px;\r\n    width: 100%;\r\n\r\n    p {\r\n      margin: 0;\r\n\r\n      &:after, &:before {\r\n        content: '';\r\n        border-top: 1px solid white;\r\n        width: 50px;\r\n        display: inline-block;\r\n        height: 5px;\r\n        margin: 0 10px;\r\n      }\r\n    }\r\n  `;\r\n\r\n  return (\r\n    <div css={appStyle}>\r\n      <div css={headerStyle}>\r\n        <img src={logo} alt=\"PGS Software logo\" css={logoStyle} />\r\n      </div>\r\n\r\n      <SearchSection setFilter={setFilter} filter={filter} reSearch={reFetch} />\r\n\r\n      {songs.length > 0 && !loading ? (\r\n        <React.Fragment>\r\n          <SongsList songs={songs.slice(offset, offset + perPage)} fullCount={songs.length} />\r\n\r\n          <div css={navigationStyle}>\r\n            <button onClick={decreaseOffset} type=\"button\">&lt;&lt; prev</button>\r\n            <button onClick={increaseOffset} type=\"button\">next &gt;&gt;</button>\r\n          </div>\r\n        </React.Fragment>\r\n      ) : (\r\n        <div css={statusStyle}>\r\n          {loading ? <p>Loading data...</p> : null }\r\n          {!loading && response ? <p>Sorry, no matches found</p> : null}\r\n        </div>\r\n      )}\r\n\r\n      <div css={footerStyle}>\r\n        <p>Powered by PGS</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Global, css } from '@emotion/core';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst globalStyle = css`\r\n@import url('https://fonts.googleapis.com/css?family=Lato');\r\n\r\nbody {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: \"Lato\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\r\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\r\n    sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n`;\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <Global styles={globalStyle} />\r\n    <App />\r\n  </React.Fragment>,\r\n  document.querySelector('#root'),\r\n);\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/pgslogo.9e495a61.png\";"],"sourceRoot":""}